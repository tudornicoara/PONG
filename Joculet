#include <iostream> 
#include <cstring>
#include <time.h>
#include <conio.h>
#include <windows.h>
#define COL 40
#define LIN 20
#define STOP 0
#define STANGA 1
#define STANGAJOS 2
#define STANGASUS 3
#define DREAPTA 4
#define DREAPTAJOS 5
#define DREAPTASUS 6
using namespace std;
unsigned int n, m, s, d;

struct bila {
	int x;
	int y;
	int directie;
};

bila b;
int mat[LIN][COL];
int scor1, scor2;
bool gameover;

void ClearScreen(int x, int y)
{
	COORD p = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p);
}

void menu(unsigned int &n, unsigned int &m)
{
	
	cout << endl << endl << endl << "       BUN VENIT IN PONG!" << endl << endl;
	cout << "       Cati jucatori sunteti: 1 sau 2?" << endl;
	cin >> n;
	if (n == 1) cout <<endl<<endl<< endl << "Taste: w  si  s" << endl;
	else cout <<endl<<endl<< endl << "Taste: w,s   si   sageti" << endl;
	cout << "q pentru oprire a jocului" << endl;
	cout << endl << endl << endl << "Pe ce harta doriti sa jucati?  (1,2,3)" << endl;
	
	char harti[8][23];
	for (int i = 0; i < 8; i++)
		for (int j = 0; j < 23; j++)
			harti[i][j] = 0;

	for (int i = 0; i < 7; i++)
		harti[0][i]=harti[6][i] = 219;
	for (int i = 8; i < 15; i++)
		harti[0][i] = harti[6][i] = 219;
	for (int i = 16; i < 23; i++)
		harti[0][i] = harti[6][i] = 219;

	for (int i = 0; i < 7; i++)
		harti[i][7] = harti[i][15] = '|';

	harti[3][0] = harti[3][6] = harti[3][8] = harti[3][14] = harti[3][16] = harti[3][22] = 219;

	harti[3][3] = harti[3][10] = harti[3][19] = 'o';

	harti[1][11] = harti[2][11] = harti[4][11] = harti[5][11] = harti[2][18] = harti[3][18] = harti[2][20] = harti[3][20] = 219;

	harti[7][3] = '1'; harti[7][11] = '2'; harti[7][19] = '3';

	for (int i = 0; i < 8; i++)
	{
		for (int j = 0; j < 23; j++)
			cout << harti[i][j];
		cout << endl;
	}
	
	cin >> m;

}

void ShowConsoleCursor(bool showFlag)
{
	HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);

	CONSOLE_CURSOR_INFO     cursorInfo;

	GetConsoleCursorInfo(out, &cursorInfo);
	cursorInfo.bVisible = showFlag; // set the cursor visibility
	SetConsoleCursorInfo(out, &cursorInfo);
}

void setupMap1()
{
	gameover = false;
	b.x = LIN/2;
	b.y = COL/2;
	scor1 = 0;
	scor2 = 0;
	b.directie = STOP;
	for (int i = 0; i < COL; i++)
	{
		mat[0][i] = 1;
		mat[LIN - 1][i] = 1;
	}
	mat[b.x][b.y] = 2;
	mat[LIN / 2 - 1][0] = mat[LIN / 2][0] = mat[LIN / 2 + 1][0] = mat[LIN / 2 + 2][0] = 1;
	mat[LIN / 2 - 1][COL-1] = mat[LIN / 2][COL - 1] = mat[LIN / 2 + 1][COL - 1] = mat[LIN / 2 + 2][COL - 1] = 1;
}

void setupMap2()
{
	gameover = false;
	b.x = LIN / 2;
	b.y = COL / 2;
	scor1 = 0;
	scor2 = 0;
	b.directie = STOP;
	for (int i = 0; i < COL; i++)
	{
		mat[0][i] = 1;
		mat[LIN - 1][i] = 1;
	}
	mat[b.x][b.y] = 2;
	mat[LIN / 2 - 1][0] = mat[LIN / 2][0] = mat[LIN / 2 + 1][0] = mat[LIN / 2 + 2][0] = 1;
	mat[LIN / 2 - 1][COL - 1] = mat[LIN / 2][COL - 1] = mat[LIN / 2 + 1][COL - 1] = mat[LIN / 2 + 2][COL - 1] = 1;

	for (int i = 1; i < 6; i++)
		mat[i][COL / 2] = mat[LIN - i - 1][COL / 2] = 1;

}

void setupMap3()
{
	gameover = false;
	b.x = LIN / 2;
	b.y = COL / 2;
	scor1 = 0;
	scor2 = 0;
	b.directie = STOP;
	for (int i = 0; i < COL; i++)
	{
		mat[0][i] = 1;
		mat[LIN - 1][i] = 1;
	}
	mat[b.x][b.y] = 2;
	mat[LIN / 2 - 1][0] = mat[LIN / 2][0] = mat[LIN / 2 + 1][0] = mat[LIN / 2 + 2][0] = 1;
	mat[LIN / 2 - 1][COL - 1] = mat[LIN / 2][COL - 1] = mat[LIN / 2 + 1][COL - 1] = mat[LIN / 2 + 2][COL - 1] = 1;

	mat[LIN / 2 - 1][COL / 4 - 1] = mat[LIN / 2 - 1][COL / 4] = mat[LIN / 2-1][COL / 4 + 1]=mat[LIN/2-1][COL/4+2] = mat[LIN / 2 - 1][COL / 4 * 3 - 1] = mat[LIN / 2 - 1][COL / 4 * 3] = mat[LIN / 2-1][COL / 4 * 3 + 1] = mat[LIN / 2 - 1][COL / 4 * 3 + 2] = 1;
}

void draw()
{
	ClearScreen(0, 0);
	char c = 219;
	
	for(int i=0;i<LIN;i++)
		for (int j = 0; j < COL; j++)
		{
			switch (mat[i][j])
			{
			case 0:
				cout << " ";
				break;
			case 1:
				cout << c;
				break;
			case 2:
				cout << 'o';
				break;
			}
			if (j == COL - 1) cout << endl;
		}
	cout << "Scor 1: " << scor1<< endl <<"Scor 2: "<< scor2 << endl;
	
}

void player1MoveUp()
{
	if (mat[1][0]!=1)
		for(int i=1;i<LIN-1;i++)
			if (mat[i][0] == 1)
			{
				mat[i-1][0] = 1;
				mat[i][0] = 0;
			}
}

void player1MoveDown()
{
	if (mat[LIN-2][0] != 1)
		for (int i = LIN-2; i>0; i--)
			if (mat[i][0] == 1)
			{
				mat[i + 1][0] = 1;
				mat[i][0] = 0;
			}
}

void player2MoveUp()
{
	if (mat[1][COL-1] != 1)
		for (int i = 1; i<LIN-1; i++)
			if (mat[i][COL-1] == 1)
			{
				mat[i-1][COL-1] = 1;
				mat[i][COL-1] = 0;
			}
}

void player2MoveDown()
{
	if (mat[LIN-2][COL-1] != 1)
		for (int i = LIN - 2; i>0; i--)
			if (mat[i][COL-1] == 1)
			{
				mat[i+1][COL-1] = 1;
				mat[i][COL-1] = 0;
			}
}

void input2Player()
{
	if (_kbhit())
	{
		char current = _getch();
		if (current == 'w')
			player1MoveUp();
		if (current == 's')
			player1MoveDown();
		if (current == 72)
			player2MoveUp();
		if (current == 80)
			player2MoveDown();
		if (current == 'q')
			gameover = true;
	}
}

void input1Player()
{
	if (_kbhit())
	{
		char current = _getch();
		if (current == 'w')
			player1MoveUp();
		if (current == 's')
			player1MoveDown();
		if (current == 'q')
			gameover = true;
	}
}

void reset()
{
	mat[b.x][b.y] = 0;
	b.x = LIN / 2;
	b.y = COL / 2;
	b.directie = STOP;
	mat[b.x][b.y] = 2;
	for (int i = 1; i < LIN - 1; i++)
		mat[i][0] = mat[i][COL - 1] = 0;
	mat[LIN / 2 - 1][0] = mat[LIN / 2][0] = mat[LIN / 2 + 1][0] = mat[LIN / 2 + 2][0] = 1;
	mat[LIN / 2 - 1][COL - 1] = mat[LIN / 2][COL - 1] = mat[LIN / 2 + 1][COL - 1] = mat[LIN / 2 + 2][COL - 1] = 1;
}

void move()
{
	mat[b.x][b.y] = 0;

	switch (b.directie)
	{
	case STANGA:
		b.y--;
		break;
	
	case STANGAJOS:
		b.y--;
		b.x++;
		break;

	case STANGASUS:
		b.y--;
		b.x--;
		break;

	case DREAPTA:
		b.y++;
		break;

	case DREAPTAJOS:
		b.y++;
		b.x++;
		break;

	case DREAPTASUS:
		b.y++;
		b.x--;
		break;

	}

	mat[b.x][b.y] = 2;
}

void logic()
{

	if (b.directie == STOP)
		b.directie = rand() % 6 + 1;

	//DIRECTIE STANGA
	if (b.directie >= 1 && b.directie <= 3)
	if(b.x!=LIN-2 || b.x!=1)
	{
		if (mat[b.x][b.y-1] == 1 && mat[b.x - 1][b.y - 1] == 1 && mat[b.x + 1][b.y - 1] == 1) b.directie = DREAPTA;
		if (mat[b.x][b.y - 1] == 1 && mat[b.x - 1][b.y - 1] == 0 && mat[b.x + 1][b.y - 1] == 1) b.directie = DREAPTASUS;
		if (mat[b.x][b.y - 1] == 1 && mat[b.x - 1][b.y - 1] == 1 && mat[b.x + 1][b.y - 1] == 0) b.directie = DREAPTAJOS;

	//PERETE SUS
		if(mat[b.x - 1][b.y] == 1) 
			if (mat[b.x][b.y - 1] == 1) b.directie = DREAPTAJOS;
			else b.directie = STANGAJOS;
		
	//PERETE JOS
		if (mat[b.x + 1][b.y] == 1) 
			if (mat[b.x][b.y-1]==1) b.directie = DREAPTASUS;
			else b.directie = STANGASUS;
	}

	//DIRECTIE DREAPTA
	if (b.directie >= 4 && b.directie <= 6)
		if (b.x != LIN - 2 || b.x != 1)
		{
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 1 && mat[b.x + 1][b.y + 1] == 1) b.directie = STANGA;
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 0 && mat[b.x + 1][b.y + 1] == 1) b.directie = STANGASUS;
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 1 && mat[b.x + 1][b.y + 1] == 0) b.directie = STANGAJOS;

		//PERETE SUS
			if (mat[b.x - 1][b.y] == 1)
				if (mat[b.x][b.y + 1] == 1) b.directie = STANGAJOS;
				else b.directie = DREAPTAJOS;

		//PERETE JOS
				if (mat[b.x + 1][b.y] == 1)
					if (mat[b.x][b.y + 1] == 1) b.directie = STANGASUS;
					else b.directie = DREAPTASUS;
		}

	//SCORURI
	if (b.y == 0) {scor2++; reset();}
	if (b.y == COL-1) { scor1++; reset(); }
	if (scor1 == 10 || scor2 == 10) gameover = true;

}

void logic2()
{
	if (b.directie == STOP)
		b.directie = rand() % 6 + 1;

	//DIRECTIE STANGA
	if (b.directie >= 1 && b.directie <= 3)
		if (b.x != LIN - 2 || b.x != 1)
		{
			if (mat[b.x][b.y - 1] == 1 && mat[b.x - 1][b.y - 1] == 1 && mat[b.x + 1][b.y - 1] == 1) b.directie = DREAPTA;
			if (mat[b.x][b.y - 1] == 1 && mat[b.x - 1][b.y - 1] == 0 && mat[b.x + 1][b.y - 1] == 1) b.directie = DREAPTASUS;
			if (mat[b.x][b.y - 1] == 1 && mat[b.x - 1][b.y - 1] == 1 && mat[b.x + 1][b.y - 1] == 0) b.directie = DREAPTAJOS;

			//PERETE SUS
			if (mat[b.x - 1][b.y] == 1)
				if (mat[b.x][b.y - 1] == 1) b.directie = DREAPTAJOS;
				else b.directie = STANGAJOS;

				//PERETE JOS
				if (mat[b.x + 1][b.y] == 1)
					if (mat[b.x][b.y - 1] == 1) b.directie = DREAPTASUS;
					else b.directie = STANGASUS;
		}

	//DIRECTIE DREAPTA
	if (b.directie >= 4 && b.directie <= 6)
		if (b.x != LIN - 2 || b.x != 1)
		{
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 1 && mat[b.x + 1][b.y + 1] == 1) b.directie = STANGA;
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 0 && mat[b.x + 1][b.y + 1] == 1) b.directie = STANGASUS;
			if (mat[b.x][b.y + 1] == 1 && mat[b.x - 1][b.y + 1] == 1 && mat[b.x + 1][b.y + 1] == 0) b.directie = STANGAJOS;

			//PERETE SUS
			if (mat[b.x - 1][b.y] == 1)
				if (mat[b.x][b.y + 1] == 1) b.directie = STANGAJOS;
				else b.directie = DREAPTAJOS;

				//PERETE JOS
				if (mat[b.x + 1][b.y] == 1)
					if (mat[b.x][b.y + 1] == 1) b.directie = STANGASUS;
					else b.directie = DREAPTASUS;
		}

	//SCORURI
	if (b.y == 0) { scor2++; reset(); }
	if (b.y == COL - 1) { scor1++; reset(); }
	if (scor1 == 10 || scor2 == 10) gameover = true;

	//AI
	if (b.directie == 2 || b.directie == 5) 
	{
		unsigned int j;
		j = rand() & 10 + 1;
		if (j>0+d-1) player2MoveDown();
	}
	if (b.directie == 3 || b.directie == 6)
	{ 

		unsigned int j;
		j = rand() & 10 + 1;
		if (j>0+d-1) player2MoveUp(); 
	}
}

void speed(unsigned int &s)
{
	system("cls");
	cout << "Cat de repede doriti sa se miste jocul?" << endl;
	cout << "1=foarte repede       5=foarte incet" << endl;
	cout << endl << endl << "Depinde de procesorul PC-ului, eu recomand 2"<<endl;
	cin >> s;
	s = s * 10;
}

void dificultate(unsigned int &d)
{
	cout << endl<<endl<<"Ce dificultate doriti?" << endl;
	cout << "1=IMPOSSIBLE  2=Foarte greu  3=Greu  4=Meh  5=Noob" << endl;
	cin >> d;
}

int main()
{
	speed(s);
	ShowConsoleCursor(false);
	srand(time(NULL));
	menu(n,m);

	if (n == 1) dificultate(d);

	system("cls");

	if (n == 2 && m==1)
	{
		setupMap1();
		while (!gameover)
		{
			draw();
			input2Player();
			logic();
			move();
			Sleep(s);
		}
	}

	if (n == 2 && m == 2)
	{
		setupMap2();
		while (!gameover)
		{
			draw();
			input2Player();
			logic();
			move();
			Sleep(s);
		}
	}


	if (n == 2 && m == 3)
	{
		setupMap3();
		while (!gameover)
		{
			draw();
			input2Player();
			logic();
			move();
			Sleep(s);
		}
	}
	
	if (n == 1 && m == 1)
	{
		setupMap1();
		while (!gameover)
		{
			draw();
			input1Player();
			logic2();
			move();
			Sleep(s);
		}
	}

	if (n == 1 && m == 2)
	{
		setupMap2();
		while (!gameover)
		{
			draw();
			input1Player();
			logic2();
			move();
			Sleep(s);
		}
	}

	if (n == 1 && m == 3)
	{
		setupMap3();
		while (!gameover)
		{
			draw();
			input1Player();
			logic2();
			move();
			Sleep(s);
		}
	}

	return 0;
}
